---
AWSTemplateFormatVersion: '2010-09-09'
Description:
  This is an example Cloudformation template using YAML. This template will provide you a VPC, with 2 public and 2 private subnets, and a Serverless Aurora Cluster. ***WARNING*** Deploying this template will incur AWS charges.
Parameters:
  VPCCIDRBLOCK:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.0.0/19
    Description: CIDR Block for the VPC
    Type: String
  PubSubnet1:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.0.0/22
    Description: CIDR block for public subnet 1 located in Availability Zone 1.
    Type: String
  PubSubnet2:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.4.0/22
    Description: CIDR block for public subnet 2 located in Availability Zone 2.
    Type: String
  PrivSubnet1:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.16.0/22
    Description: CIDR Block for the private subnet 1 located in Availability Zone 1
    Type: String
  PrivSubnet2:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.20.0/22
    Description: CIDR Block for the private subnet 2 located in Availability Zone 2
    Type: String
  ProjectTag:
    Default: Development
    Description: The tag to include on all created resources to make identification and reporting easy.
    Type: String
  BastionInstanceType:
    Default: t3.small
    Description: The EC2 instance type for the Bastion Instance
    Type: String
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t3.small
      - t3.medium
      - t3.large
  InstanceKey:
    Description: The EC2 instance KeyPair for the Bastion Instance - this keypair must already exist in your account
    Type: AWS::EC2::KeyPair::KeyName
  DatabasePassword:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter, between 8 and 32 characters, and contain only alphanumeric characters.
    Description: The database admin account password.
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DatabaseUsername:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Description: The database admin account user name.
    MaxLength: '16'
    MinLength: '4'
    Type: String
  MyDatabaseName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Description: The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
    MaxLength: '64'
    MinLength: '4'
    Type: String
  DatabaseBackupRetentionPeriod:
    Type: String
    Default: 1
    AllowedPattern: '[1-14]'
    Description: The database backup retention period in days - from 1 to 14.
Mappings:
  AMAZONLINUXAMI:
# This AMI list represents Amazon Linux AMI 2018.08.3 was released on 2018-08-11 - amzn-ami-hvm-2018.03.0.20180811-x86_64-gp2
    us-east-1:
      AMI: ami-0ff8a91507f77f867
    us-east-2:
      AMI: ami-0b59bfac6be064b78
    us-west-2:
      AMI: ami-a0cfeed8
    us-west-1:
      AMI: ami-0bdb828fd58c52235
    ca-central-1:
      AMI: ami-0b18956f
    eu-west-1:
      AMI: ami-047bb4163c506cd98
    eu-west-2:
      AMI: ami-f976839e
    eu-west-3:
      AMI: ami-0ebc281c20e89ba4b
    eu-central-1:
      AMI: ami-0233214e13e500f77
    ap-south-1:
      AMI: ami-0912f71e06545ad88
    ap-southeast-1:
      AMI: ami-08569b978cc4dfa10
    ap-southeast-2:
      AMI: ami-09b42976632b27e9b
    ap-northeast-1:
      AMI: ami-06cd52961ce9f0d85
    ap-northeast-2:
      AMI: ami-0a10b2721688ce9d2
    sa-east-1:
      AMI: ami-07b14488da8ea02a0
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCIDRBLOCK
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PubSubnet1
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PubSubnet2
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivSubnet1
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivSubnet2
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - AttachGateway
      - PublicRouteTable
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicSubnet1
      - AttachGateway
      - PublicRouteTable
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicSubnet2
      - AttachGateway
      - PublicRouteTable
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - AttachGateway
    - PrivateSubnet1
    - PrivateRouteTable1
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - AttachGateway
    - PrivateSubnet2
    - PrivateRouteTable2
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable2
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  NAT1EIP:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT2EIP:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway1:
    DependsOn:
      - PublicSubnet1
      - NAT1EIP
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NAT1EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  NATGateway2:
    DependsOn:
      - NAT2EIP
      - PublicSubnet2
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NAT2EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet2
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  BastionInstance:
    Type: AWS::EC2::Instance
    DependsOn:
    - NATGateway1
    - NATGateway2
    - BastionSecurityGroup
    - DatabaseCluster
    Properties:
      ImageId:
        Fn::FindInMap:
        - AMAZONLINUXAMI
        - Ref: AWS::Region
        - AMI
      InstanceType:
        Ref: BastionInstanceType
      KeyName:
        Ref: InstanceKey
      NetworkInterfaces:
      - DeviceIndex: '0'
        AssociatePublicIpAddress: 'true'
        SubnetId:
          Ref: PublicSubnet1
        GroupSet:
        - Ref: BastionSecurityGroup
      Tags:
      - Key: Name
        Value: Bastion Instance
      - Key: Project
        Value:
          Ref: ProjectTag
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y erase ntp*
          yum -y install chrony
          service chronyd start
          chkconfig --level 345 chronyd on
          yum -y update
          pip install --upgrade pip argparse cheetah oauth PrettyTable pyserial awscli
  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: NATGateway1
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway1
  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: NATGateway2
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway2
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - PublicSubnet2
      - PublicSubnet1
    Properties:
      GroupDescription: Enable SSH access to bastion host
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - AttachGateway
      - PrivateSubnet2
      - PrivateSubnet1
    Properties:
      GroupDescription: Security Group that allows access to Aurora from the entire VPC
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp:
          Ref: VPCCIDRBLOCK
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn:
      - PrivateSubnet2
      - PrivateSubnet1
    Properties:
      DBSubnetGroupDescription: The subnet group for RDS Aurora
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    DependsOn:
      - PrivateSubnet1
      - PrivateSubnet2
      - DatabaseSecurityGroup
      - DatabaseSubnetGroup
      - NATGateway1
      - NATGateway2
    Properties:
        Engine: 'aurora'
        EngineVersion: '5.6.10a'
        EngineMode: 'serverless'
        ScalingConfiguration:
          AutoPause: true
          MaxCapacity: 16
          MinCapacity: 2
          SecondsUntilAutoPause: 3600
        MasterUsername:
            Ref: DatabaseUsername
        MasterUserPassword:
            Ref: DatabasePassword
        BackupRetentionPeriod:
            Ref: DatabaseBackupRetentionPeriod
        PreferredBackupWindow: 02:00-04:00
        PreferredMaintenanceWindow: mon:04:00-mon:05:00
        DBSubnetGroupName:
            Ref: DatabaseSubnetGroup
        DBClusterParameterGroupName: 'default.aurora5.6'
        DatabaseName:
          Ref: MyDatabaseName
        VpcSecurityGroupIds:
          -  Ref: DatabaseSecurityGroup
        StorageEncrypted: 'true'
Outputs:
  BastionInstanceIP:
    Description: The public IP address for the Linux Bastion Instance.
    Value: !GetAtt BastionInstance.PublicIp
  BastionInstanceUser:
    Description: The username to connect to the Bastion Instance.
    Value: ec2-user
  KeyPair:
    Description: The EC2 Keypair to authenticate to the Instances
    Value:
      Ref: InstanceKey
  RDSAuroraEndpoint:
    Description: The endpoint to use for connecting to RDS Aurora.
    Value: !GetAtt DatabaseCluster.Endpoint.Address
