---
AWSTemplateFormatVersion: '2010-09-09'
Description: This is an example Cloudformation template using YAML. This
  template will provide you a VPC, with 2 public and 2 private subnets, 
  taking advantage of NAT Gateway. Additionally this template will provide
  you an Amazon Linux bastion host with a public IP address. ***WARNING*** 
  Deploying this template will incur AWS charges.
Parameters:
  VPCCIDRBLOCK:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.0.0/19
    Description: CIDR Block for the VPC
    Type: String
  PubSubnet1:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.0.0/22
    Description: CIDR block for public subnet 1 located in Availability Zone 1.
    Type: String
  PubSubnet2:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.4.0/22
    Description: CIDR block for public subnet 2 located in Availability Zone 2.
    Type: String
  PrivSubnet1:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.16.0/22
    Description: CIDR Block for the private subnet 1 located in Availability Zone 1
    Type: String
  PrivSubnet2:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.20.0/22
    Description: CIDR Block for the private subnet 2 located in Availability Zone 2
    Type: String
  EnvironmentTag:
    Default: Development
    Description: The tag to include on all created resources to make identification easy.
    Type: String
  BastionInstanceType:
    Default: t2.micro
    Description: The EC2 instance type for the Bastion Instance
    Type: String
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - m5.large
      - m5.xlarge
      - c5.large
      - c5.xlarge
      - r4.large
      - r4.xlarge
  BastionInstanceKey:
    Description: The EC2 instance KeyPair for the Bastion Instance - this keypair must already exist in your account
    Type: AWS::EC2::KeyPair::KeyName
Mappings:
  AMAZONLINUXAMI:
# This AMI list represents Amazon Linux AMI 2017.09.1 which was released on 2017-11-22    
    us-east-1:
      AMI: ami-55ef662f
    us-east-2:
      AMI: ami-15e9c770
    us-west-2:
      AMI: ami-bf4193c7
    us-west-1:
      AMI: ami-a51f27c5
    ca-central-1:
      AMI: ami-d29e25b6
    eu-west-1:
      AMI: ami-1a962263
    eu-west-2:
      AMI: ami-e7d6c983
    eu-central-1:
      AMI: ami-bf2ba8d0
    ap-southeast-1:
      AMI: ami-c63d6aa5
    ap-southeast-2:
      AMI: ami-ff4ea59d
    ap-northeast-1:
      AMI: ami-da9e2cbc
    ap-northeast-2:
      AMI: ami-1196317f
    sa-east-1:
      AMI: ami-286f2a44
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCIDRBLOCK
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway          
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PubSubnet1
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PubSubnet2
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivSubnet1
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivSubnet2
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet1
    - AttachGateway
    - PublicRouteTable
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet2
    - AttachGateway
    - PublicRouteTable
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - AttachGateway
    - PrivateSubnet1
    - PrivateRouteTable1
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - AttachGateway
    - PrivateSubnet2
    - PrivateRouteTable2
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable2
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  NAT1EIP:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT2EIP:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway1:
    DependsOn:
      - PublicSubnet1
      - NAT1EIP   
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NAT1EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  NATGateway2:
    DependsOn:
      - NAT2EIP
      - PublicSubnet2   
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NAT2EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet2
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  BastionInstance:
    Type: AWS::EC2::Instance
    DependsOn:
    - NATGateway1
    - NATGateway2
    - BastionSecurityGroup
    Properties:
      ImageId:
        Fn::FindInMap:
        - AMAZONLINUXAMI
        - Ref: AWS::Region
        - AMI
      InstanceType:
        Ref: BastionInstanceType
      KeyName:
        Ref: BastionInstanceKey
      NetworkInterfaces:
      - DeviceIndex: '0'
        AssociatePublicIpAddress: 'true'
        SubnetId:
          Ref: PublicSubnet1
        GroupSet:
        - Ref: BastionSecurityGroup
      Tags:
      - Key: Name
        Value: Bastion Instance
      - Key: Environment
        Value:
          Ref: EnvironmentTag
# UserData to update OS, update AWSCLI, and replace ntp with Chrony        
# Also show example of downloding a publicly accessible file from S3 and using it locally
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          pip install --upgrade pip &> /dev/null
          pip install awscli --ignore-installed six &> /dev/null
          yum -y erase ntp*
          yum -y install chrony
          service chronyd start
          chkconfig --level 345 chronyd on
          wget https://s3.amazonaws.com/testing-example-gendel/tux -O /etc/tux
          echo Banner /etc/tux >> /etc/ssh/sshd_config
          service sshd restart
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - PublicSubnet2
      - PublicSubnet1
    Properties:
      GroupDescription: Enable SSH access to bastion host
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag        
  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: NATGateway1
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway1
  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: NATGateway2
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway2
Outputs:
  BastionInstanceIP:
    Description: The public IP address for the Linux Bastion Instance.
    Value: !GetAtt BastionInstance.PublicIp
  BastionInstanceUser:
    Description: The username to connect to the Bastion Instance.
    Value: ec2-user
  BastionInstanceKeyPair:
    Description: The EC2 Keypair to authenticate to the Bastion Instance
    Value: 
      Ref: BastionInstanceKey
