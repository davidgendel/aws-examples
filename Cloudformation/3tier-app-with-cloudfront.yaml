---
AWSTemplateFormatVersion: '2010-09-09'
Description:
  This is an example Cloudformation template using YAML. This template will provide you a VPC, with 2 public and 2 private
  subnets, taking advantage of NAT Gateway. Additionally this template will provide you an Amazon Linux bastion host with a
  public IP address. ***WARNING*** Deploying this template will incur AWS charges.
Parameters:
  VPCCIDRBLOCK:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.0.0/19
    Description: CIDR Block for the VPC
    Type: String
  PubSubnet1:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.0.0/22
    Description: CIDR block for public subnet 1 located in Availability Zone 1.
    Type: String
  PubSubnet2:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.4.0/22
    Description: CIDR block for public subnet 2 located in Availability Zone 2.
    Type: String
  PrivSubnet1:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.16.0/22
    Description: CIDR Block for the private subnet 1 located in Availability Zone 1
    Type: String
  PrivSubnet2:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.20.0/22
    Description: CIDR Block for the private subnet 2 located in Availability Zone 2
    Type: String
  ProjectTag:
    Default: Development
    Description: The tag to include on all created resources to make identification and reporting easy.
    Type: String
  BastionInstanceType:
    Default: t2.micro
    Description: The EC2 instance type for the Bastion Instance
    Type: String
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - m5.large
      - m5.xlarge
      - c5.large
      - c5.xlarge
      - r4.large
      - r4.xlarge
  AppInstanceType:
    Default: t2.small
    Description: The EC2 instance type for the App Instance
    Type: String
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - m5.large
      - m5.xlarge
      - c5.large
      - c5.xlarge
      - r4.large
      - r4.xlarge
  InstanceKey:
    Description: The EC2 instance KeyPair for the Bastion Instance - this keypair must already exist in your account
    Type: AWS::EC2::KeyPair::KeyName
  AppURL:
    Description: The domain name/URL to use with the CloudFront Distribution
    Type: String
    Default: demo.aws.dgendel.com
  HostZoneName:
    Description: The domain of the hosted zone in Route 53
    Type: String
    Default: aws.dgendel.com.
  SSLCert:
    Description: The SSL Certificate ARN from ACM to use with the Load Balancer * Note this must be an ACM certificate in us-east-1
    Type: String
    Default: arn:aws:acm:us-east-1:855221579500:certificate/8b1a25b4-04bc-4b9b-b65f-c035c08b31ca
  DatabaseInstanceType:
    Default: db.t2.small
    AllowedValues:
        - db.t2.small
        - db.t2.medium
        - db.r4.large
        - db.r4.xlarge
        - db.r4.2xlarge
    Description: The instance type to use for the database.
    Type: String
  DatabasePassword:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter, between 8 and 32 characters, and contain only alphanumeric characters.
    Description: The database admin account password.
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DatabaseUsername:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Description: The database admin account user name.
    MaxLength: '16'
    MinLength: '4'
    Type: String
  DatabaseBackupRetentionPeriod:
    Type: String
    Default: 1
    AllowedPattern: '[1-14]'
    Description: The database backup retention period in days - from 1 to 14.
Mappings:
  AMAZONLINUXAMI:
# This AMI list represents Amazon Linux AMI 2017.09.1 was released on 2018-01-17
    us-east-1:
      AMI: ami-97785bed
    us-east-2:
      AMI: ami-f63b1193
    us-west-2:
      AMI: ami-f2d3638a
    us-west-1:
      AMI: ami-824c4ee2
    ca-central-1:
      AMI: ami-a954d1cd
    eu-west-1:
      AMI: ami-d834aba1
    eu-west-2:
      AMI: ami-403e2524
    eu-west-3:
      AMI: ami-8ee056f3
    eu-central-1:
      AMI: ami-5652ce39
    ap-south-1:
      AMI: ami-531a4c3c
    ap-southeast-1:
      AMI: ami-942dd1f6
    ap-southeast-2:
      AMI: ami-68097514
    ap-northeast-1:
      AMI: ami-ceafcba8
    ap-northeast-2:
      AMI: ami-863090e8
    sa-east-1:
      AMI: ami-84175ae8
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCIDRBLOCK
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PubSubnet1
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PubSubnet2
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivSubnet1
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivSubnet2
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - AttachGateway
      - PublicRouteTable
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicSubnet1
      - AttachGateway
      - PublicRouteTable
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicSubnet2
      - AttachGateway
      - PublicRouteTable
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - AttachGateway
    - PrivateSubnet1
    - PrivateRouteTable1
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - AttachGateway
    - PrivateSubnet2
    - PrivateRouteTable2
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable2
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  NAT1EIP:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT2EIP:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway1:
    DependsOn:
      - PublicSubnet1
      - NAT1EIP
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NAT1EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  NATGateway2:
    DependsOn:
      - NAT2EIP
      - PublicSubnet2
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NAT2EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet2
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  BastionInstance:
    Type: AWS::EC2::Instance
    DependsOn:
    - NATGateway1
    - NATGateway2
    - BastionSecurityGroup
    Properties:
      ImageId:
        Fn::FindInMap:
        - AMAZONLINUXAMI
        - Ref: AWS::Region
        - AMI
      InstanceType:
        Ref: BastionInstanceType
      KeyName:
        Ref: InstanceKey
      NetworkInterfaces:
      - DeviceIndex: '0'
        AssociatePublicIpAddress: 'true'
        SubnetId:
          Ref: PublicSubnet1
        GroupSet:
        - Ref: BastionSecurityGroup
      Tags:
      - Key: Name
        Value: Bastion Instance
      - Key: Project
        Value:
          Ref: ProjectTag
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y erase ntp*
          yum -y install chrony
          service chronyd start
          chkconfig --level 345 chronyd on
          yum -y update
          pip install --upgrade pip argparse cheetah oauth PrettyTable pyserial awscli
          echo -e '\n' >> /etc/tux
          wget https://s3.us-east-2.amazonaws.com/testing-example-gendel/tux -O /etc/tux
          echo -e '\n\n' >> /etc/tux
          echo -e '\nBanner /etc/tux' >> /etc/ssh/sshd_config
          service sshd restart
  AppInstance:
    Type: AWS::EC2::Instance
    DependsOn:
    - NATGateway1
    - NATGateway2
    - AppSecurityGroup
    Properties:
      ImageId:
        Fn::FindInMap:
        - AMAZONLINUXAMI
        - Ref: AWS::Region
        - AMI
      InstanceType:
        Ref: AppInstanceType
      KeyName:
        Ref: InstanceKey
      NetworkInterfaces:
      - DeviceIndex: '0'
        AssociatePublicIpAddress: 'true'
        SubnetId:
          Ref: PrivateSubnet1
        GroupSet:
        - Ref: AppSecurityGroup
      Tags:
      - Key: Name
        Value: App Instance
      - Key: Project
        Value:
          Ref: ProjectTag
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y erase ntp*
          yum -y install chrony
          service chronyd start
          chkconfig --level 345 chronyd on
          yum -y update
          yum -y install httpd
          chkconfig --level 345 httpd on
          service httpd start
          echo ipsum lorem > /var/www/html/index.html
  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: NATGateway1
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway1
  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: NATGateway2
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway2
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - PublicSubnet2
      - PublicSubnet1
    Properties:
      GroupDescription: Enable SSH access to bastion host
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: load balancers - http and https
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ec2 - lamp
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - AttachGateway
      - PrivateSubnet2
      - PrivateSubnet1
    Properties:
      GroupDescription: Security Group that allows access to Aurora from the entire VPC
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp:
          Ref: VPCCIDRBLOCK
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - PublicSubnet2
      - PublicSubnet1
      - InternetGateway
      - AttachGateway
      - LBSecurityGroup
    Properties:
      Name: App-LB-Public
      Scheme: internet-facing
      SecurityGroups:
        - Ref: LBSecurityGroup
      Subnets:
        - Ref: PublicSubnet2
        - Ref: PublicSubnet1
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
      Type: application
  AppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - AppLoadBalancer
      - AppLBTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: AppLBTargetGroup
      LoadBalancerArn:
        Ref: AppLoadBalancer
      Port: 80
      Protocol: HTTP
  AppLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - AppLoadBalancer
      - AppInstance
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: AppLBTargetGroup
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
      Targets:
      - Id:
          Ref: AppInstance
        Port: 80
      TargetType: instance
      UnhealthyThresholdCount: 4
      VpcId:
        Ref: VPC
  CloudFrontDistro:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - AppLoadBalancer
      - AppInstance
    Properties:
      DistributionConfig:
        Aliases:
        - Ref: AppURL
        Comment: CloudFront Distribution for Application
        Enabled: true
        PriceClass: PriceClass_100
        DefaultCacheBehavior:
          TargetOriginId: !GetAtt AppLoadBalancer.LoadBalancerName
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 60
          AllowedMethods:
          - HEAD
          - GET
          CachedMethods:
          - HEAD
          - GET
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: 'true'
        DefaultRootObject: index.html
        HttpVersion: http2
        Origins:
        - DomainName: !GetAtt AppLoadBalancer.DNSName
          Id: !GetAtt AppLoadBalancer.LoadBalancerName
          CustomOriginConfig:
            HTTPPort: '80'
            OriginProtocolPolicy: http-only
        ViewerCertificate:
          AcmCertificateArn:
            Ref: SSLCert
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2018
      Tags:
      - Key: Project
        Value:
          Ref: ProjectTag
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn:
      - PrivateSubnet2
      - PrivateSubnet1
    Properties:
      DBSubnetGroupDescription: The subnet group for RDS Aurora
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    DependsOn:
      - BastionInstance
      - PrivateSubnet1
      - PrivateSubnet2
      - DatabaseSecurityGroup
      - DatabaseSubnetGroup
    Properties:
        Engine: 'aurora-mysql'
        EngineVersion: '5.7.12'
        MasterUsername:
            Ref: DatabaseUsername
        MasterUserPassword:
            Ref: DatabasePassword
        BackupRetentionPeriod:
            Ref: DatabaseBackupRetentionPeriod
        PreferredBackupWindow: 02:00-04:00
        PreferredMaintenanceWindow: mon:04:00-mon:05:00
        DBSubnetGroupName:
            Ref: DatabaseSubnetGroup
        DBClusterParameterGroupName: 'default.aurora-mysql5.7'
        VpcSecurityGroupIds:
          -  Ref: DatabaseSecurityGroup
        StorageEncrypted: 'true'
  DatabasePrimaryInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: DatabaseCluster
    Properties:
        Engine: 'aurora-mysql'
        DBClusterIdentifier:
            Ref: DatabaseCluster
        DBInstanceClass:
            Ref: DatabaseInstanceType
        DBSubnetGroupName:
            Ref: DatabaseSubnetGroup
        DBParameterGroupName: 'default.aurora-mysql5.7'
  DatabaseReplicaInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: DatabaseCluster
    Properties:
        Engine: 'aurora-mysql'
        DBClusterIdentifier:
            Ref: DatabaseCluster
        DBInstanceClass:
            Ref: DatabaseInstanceType
        DBSubnetGroupName:
            Ref: DatabaseSubnetGroup
        DBParameterGroupName: 'default.aurora-mysql5.7'
  R53RecordCloudFront:
    Type: AWS::Route53::RecordSetGroup
    DependsOn:
      - CloudFrontDistro
    Properties:
      HostedZoneName:
        Ref: HostZoneName
      RecordSets:
      - Name:
          Ref: AppURL
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt CloudFrontDistro.DomainName
Outputs:
  BastionInstanceIP:
    Description: The public IP address for the Linux Bastion Instance.
    Value: !GetAtt BastionInstance.PublicIp
  BastionInstanceUser:
    Description: The username to connect to the Bastion Instance.
    Value: ec2-user
  KeyPair:
    Description: The EC2 Keypair to authenticate to the Instances
    Value:
      Ref: InstanceKey
  RDSEndpointWrite:
    Description: The WRITE endpoint to use for connecting to RDS Aurora.
    Value: !GetAtt DatabaseCluster.Endpoint.Address
  RDSEndpointRead:
    Description: The READ-ONLY endpoint to use for connecting to RDS Aurora.
    Value: !GetAtt DatabaseCluster.ReadEndpoint.Address
