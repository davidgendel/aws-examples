---
AWSTemplateFormatVersion: '2010-09-09'
Description: Quickstart Cloudformation Template - This template creates a VPC infrastructure.
  It will deploy one bastion instance running Amazon Linux and managed NAT gateways
  into the public subnet for each Availability Zone. **WARNING** This template creates
  Amazon EC2 instance and related resources. You will be billed for the AWS resources
  used if you create a stack from this template. This template is provided as-is,
  with no implied or explicit guarantee.
Parameters:
  VPCCIDRBLOCK:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.0.0/16
    Description: CIDR Block for the VPC
    Type: String
  PubSubnet1:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.0.0/22
    Description: CIDR block for public subnet 1 located in Availability Zone 1.
    Type: String
  PubSubnet2:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.4.0/22
    Description: CIDR block for public subnet 2 located in Availability Zone 1.
    Type: String
  PrivSubnet1:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.48.0/22
    Description: CIDR Block for the public DMZ subnet 1 located in Availability Zone
      1
    Type: String
  PrivSubnet2:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.250.52.0/22
    Description: CIDR Block for the public DMZ subnet 1 located in Availability Zone
      1
    Type: String
  EnvironmentTag:
    Default: Development
    Description: The tag to include on all created resources to make identification
      easy.
    Type: String
  DatabaseInstanceType:
    Default: db.r3.large
    AllowedValues:
        - db.r3.large
        - db.r3.xlarge
    Description: The instance type to use for the database.
    Type: String
  DatabasePassword:
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters.
    Description: The database admin account password.
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DatabaseUsername:
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters.
    Description: The database admin account user name.
    MaxLength: '16'
    MinLength: '1'
    Type: String
  DatabaseBackupRetentionPeriod:
    Type: String
    Default: 1
    AllowedValues:
        - 1
        - 7
    Description: The database backup retention period in days.
Mappings:
  AMAZONLINUXAMI:
    us-east-1:
      AMI: ami-55ef662f
    us-east-2:
      AMI: ami-15e9c770
    us-west-2:
      AMI: ami-bf4193c7
    us-west-1:
      AMI: ami-a51f27c5
    ca-central-1:
      AMI: ami-d29e25b6
    eu-west-1:
      AMI: ami-1a962263
    eu-west-2:
      AMI: ami-e7d6c983
    eu-central-1:
      AMI: ami-bf2ba8d0
    ap-southeast-1:
      AMI: ami-c63d6aa5
    ap-southeast-2:
      AMI: ami-ff4ea59d
    ap-northeast-1:
      AMI: ami-da9e2cbc
    ap-northeast-2:
      AMI: ami-1196317f
    sa-east-1:
      AMI: ami-286f2a44
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCIDRBLOCK
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PubSubnet1
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PubSubnet2
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivSubnet1
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivSubnet2
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicSubnet1
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicSubnet2
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable2
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  NAT1EIP:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT2EIP:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway1:
    DependsOn:
      - AttachGateway
      - PublicSubnet2   
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NAT1EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  NATGateway2:
    DependsOn:
      - AttachGateway
      - PublicSubnet2   
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NAT2EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet2
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentTag
  BastionInstance:
    Type: AWS::EC2::Instance
    DependsOn: NATGateway1
    Properties:
      ImageId:
        Fn::FindInMap:
        - AMAZONLINUXAMI
        - Ref: AWS::Region
        - AMI
      InstanceType: t2.small
      NetworkInterfaces:
      - DeviceIndex: '0'
        AssociatePublicIpAddress: 'true'
        SubnetId:
          Ref: PublicSubnet1
        GroupSet:
        - Ref: BastionSecurityGroup
      Tags:
      - Key: Name
        Value: Bastion Instance
      - Key: Environment
        Value:
          Ref: EnvironmentTag
      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - "#!/bin/bash"
            - yum -y update
            - pip install --upgrade pip &> /dev/null
            - pip install awscli --ignore-installed six &> /dev/null
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AttachGateway
    Properties:
      GroupDescription: Enable SSH access to bastion host
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AttachGateway
    Properties:
      GroupDescription: Security Group that allows access to Aurora from the entire VPC
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: 
          Ref: VPCCIDRBLOCK
  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: NATGateway1
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway1
  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: NATGateway2
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway2
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn: PrivateSubnet2
    Properties:
      DBSubnetGroupDescription: The subnet group for RDS Aurora
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    DependsOn: BastionInstance
    Properties:
        Engine: aurora
        MasterUsername:
            Ref: DatabaseUsername
        MasterUserPassword:
            Ref: DatabasePassword
        BackupRetentionPeriod:
            Ref: DatabaseBackupRetentionPeriod
        PreferredBackupWindow: 02:00-04:00
        PreferredMaintenanceWindow: mon:04:00-mon:05:00
        DBSubnetGroupName:
            Ref: DatabaseSubnetGroup
        VpcSecurityGroupIds:
          -  Ref: DatabaseSecurityGroup
  DatabasePrimaryInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: DatabaseCluster
    Properties:
        Engine: aurora
        DBClusterIdentifier:
            Ref: DatabaseCluster
        DBInstanceClass:
            Ref: DatabaseInstanceType
        DBSubnetGroupName:
            Ref: DatabaseSubnetGroup
  DatabaseReplicaInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: DatabaseCluster    
    Properties:
        Engine: aurora
        DBClusterIdentifier:
            Ref: DatabaseCluster
        DBInstanceClass:
            Ref: DatabaseInstanceType
        DBSubnetGroupName:
            Ref: DatabaseSubnetGroup
Outputs:
  BastionInstanceIP:
    Description: The public IP address for the Linux Bastion Instance.
    Value: !GetAtt BastionInstance.PublicIp
  BastionInstanceUser:
    Description: The username to connect to the Bastion Instance.
    Value: ec2-user
  RDSEndpointWrite:
    Description: The WRITE endpoint to use for connecting to RDS Aurora.
    Value: !GetAtt DatabaseCluster.Endpoint.Address
  RDSEndpointRead:
    Description: The READ-ONLY endpoint to use for connecting to RDS Aurora.
    Value: !GetAtt DatabaseCluster.ReadEndpoint.Address
